#include <WiFi.h>
#include <DHTesp.h>
#include <Ultrasonic.h>
#include <ThingSpeak.h>
const char* ssid = "Wokwi-GUEST";
const char* password = "";
const unsigned long channelID = your channel ID;
const char* writeAPIKey = "your api key";
#define DHT_PIN 15
DHTesp dht;
#define TRIGGER_PIN 4
#define ECHO_PIN 5
Ultrasonic ultrasonic(TRIGGER_PIN, ECHO_PIN);
#define BUZZER_PIN 14
const int WaterLevelThreshold = 50;
WiFiClient client;
void setup() {
Serial.begin(115200);
WiFi.begin(ssid, password);
while (WiFi.status() != WL_CONNECTED) {
delay(1000);
Serial.println("Connecting to WiFi...");
}
Serial.println("Connected to WiFi");
ThingSpeak.begin(client);
dht.setup(DHT_PIN, DHTesp::DHT22);
pinMode(BUZZER_PIN, OUTPUT);
}
void loop() {
TempAndHumidity data = dht.getTempAndHumidity();
long distance = ultrasonic.read();
if (isnan(data.temperature) || isnan(data.humidity) || distance == 0) {
Serial.println("Failed to read from sensors.");
return;
}
Serial.print("Temperature (C): ");
Serial.println(data.temperature);
Serial.print("Humidity (%): ");
Serial.println(data.humidity);
Serial.print("Water Level (cm): ");
Serial.println(distance);
ThingSpeak.setField(1, data.temperature);
ThingSpeak.setField(2, data.humidity);
ThingSpeak.setField(3, distance);
int status = ThingSpeak.writeFields(channelID, writeAPIKey);
if (status == 200) {
Serial.println("Data sent to ThingSpeak successfully");
} else {
Serial.print("Data send failed, status code: ");
Serial.println(status);
}
if (distance < WaterLevelThreshold) {
digitalWrite(BUZZER_PIN, HIGH);
} else {
digitalWrite(BUZZER_PIN, LOW);
}
delay(900000); }
